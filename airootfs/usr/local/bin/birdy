#!/usr/bin/env python3
try:
    import click
except ModuleNotFoundError:
    print("\033[91m\033[1mError: \033[0mModule \"click\" is not installed, attempting to install.\033[0m")
    import os
    os.system("/bin/env pip3 install click")
    import click

def display_help():
    print("""
\033[92;1mBirdy\033[0m - \033[94;1mPackage Management Tool\033[0m

Command syntax:

Help:
birdy help

Install/search:
birdy <package/query>

Publish:
birdy publish <packageName>
""")

def install(package):
    print(f"Installed {package}")

def search(query):
    print(f"Searching for {query}")
    print("Results:")
    return {"example_package_1": "Description 1", "example_package_2": "Description 2"}

def publish(package_name):
    print(f"Published {package_name}")

@click.command()
@click.argument("command", nargs=-1)
def main(command):
    if not command:
        display_help()
    else:
        command = list(command)
        if command[0] == "help":
            display_help()
        elif command[0] == "publish":
            if len(command) != 2:
                print("Invalid 'publish' command format. Usage: birdy publish <packageName>")
                return
            publish(command[1])
        else:
            query = " ".join(command)
            results = search(query)
            if results and query in results:
                install_choice = input(f"{query} found [{results[query]}]!\nDo you want to install it? (y/n)").lower() == 'y'
                if install_choice:
                    install(query)
            else:
                items_per_page = 10
                pages = [list(results.keys())[i:i + items_per_page] for i in range(0, len(results), items_per_page)]
                current_page = 0
                nb_pages = len(pages)

                while True:
                    page_content = "\n".join(f"{i + 1}) {package}" for i, package in enumerate(pages[current_page]))
                    print(f"Page: {current_page + 1}\tMax pages: {nb_pages}\n{page_content}\n(B/Number/N)")

                    resp = input("(B) Back, (N) Next page, or select a package to install: ").lower()
                    if resp == 'b':
                        current_page = (current_page - 1) % nb_pages
                    elif resp == 'n':
                        current_page = (current_page + 1) % nb_pages
                    elif resp.isdigit() and 1 <= int(resp) <= len(pages[current_page]):
                        selected_package = pages[current_page][int(resp) - 1]
                        install(selected_package)
                        return
                    else:
                        print("Invalid input")

if __name__ == "__main__":
    main()
